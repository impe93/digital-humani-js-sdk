{"version":3,"file":"index.umd.min.js","sources":["../src/repositories/EnterpriseRepository/enterprise.repository.ts","../src/repositories/ProjectRepository/project.repositories.ts","../src/repositories/TreeRepository/tree.repository.ts","../src/repositories/UserRepository/user.repository.ts","../src/services/HttpClient/HttpClient.ts","../src/index.ts"],"sourcesContent":["import type { IHttpClient } from '../../services/HttpClient/IHttpClient';\nimport type { IEnterpriseRepository } from './enterprise.interface';\nimport type {\n  Enterprise,\n  GetTreeCountRequest,\n  Count,\n} from './enterprise.models';\n\nexport class EnterpriseRepository implements IEnterpriseRepository {\n  constructor(private httpClient: IHttpClient) {}\n\n  public readonly getEnterprise = (enterpriseId: string) => {\n    return this.httpClient.get<Enterprise>(`/enterprise/${enterpriseId}`);\n  };\n\n  public readonly getTreeCount = ({\n    endDate,\n    enterpriseId,\n    month,\n    startDate,\n  }: GetTreeCountRequest) => {\n    if (month) {\n      return this.getTreeCountByMonth(enterpriseId, month);\n    } else if (startDate && endDate) {\n      return this.getTreeCountByDateRange(enterpriseId, startDate, endDate);\n    }\n\n    throw new Error(\n      'All parameters are undefined. At least the month param or startDate and endDate params must have a value',\n    );\n  };\n\n  private readonly getTreeCountByMonth = (\n    enterpriseId: string,\n    month: string,\n  ) => {\n    return this.httpClient.get<Count>(\n      `/enterprise/${enterpriseId}/treeCount/${month}`,\n    );\n  };\n\n  private readonly getTreeCountByDateRange = (\n    enterpriseId: string,\n    startDate: string,\n    endDate: string,\n  ) => {\n    return this.httpClient.get<Count>(`/enterprise/${enterpriseId}/treeCount`, {\n      params: {\n        startDate,\n        endDate,\n      },\n    });\n  };\n}\n","import type { IHttpClient } from '../../services/HttpClient/IHttpClient';\nimport type { IProjectRepository } from './project.interface';\nimport type { ProjectPartial, Project } from './project.models';\n\nexport class ProjectRepository implements IProjectRepository {\n  constructor(private httpClient: IHttpClient) {}\n\n  public readonly getProjects = async () => {\n    return this.httpClient.get<ProjectPartial[]>('/project');\n  };\n\n  public readonly getProjectDetails = async (projectId: string) => {\n    return this.httpClient.get<Project>(`/project/${projectId}`);\n  };\n}\n","import type { IHttpClient } from '../../services/HttpClient/IHttpClient';\nimport type { ITreeRepository } from './tree.interface';\nimport type {\n  GetTreesRequest,\n  GetTreesResponse,\n  GetTreeRequest,\n  Tree,\n  PlanteTreesRequest,\n} from './tree.models';\n\nexport class TreeRepository implements ITreeRepository {\n  constructor(private httpClient: IHttpClient) {}\n\n  public readonly getTrees = async ({\n    enterpriseId,\n    user,\n  }: GetTreesRequest) => {\n    return this.httpClient.get<GetTreesResponse>('/tree', {\n      params: {\n        enterpriseId,\n        user,\n      },\n    });\n  };\n\n  public readonly getTree = ({ treeId }: GetTreeRequest) => {\n    return this.httpClient.get<Tree>(`/tree/${treeId}`);\n  };\n\n  public readonly plantTrees = (body: PlanteTreesRequest) => {\n    return this.httpClient.post<Tree>('/tree', { body });\n  };\n}\n","import type { IHttpClient } from '../../services/HttpClient/IHttpClient';\nimport type { IUserRepository } from './user.interface';\nimport type { User } from './user.models';\n\nexport class UserRepository implements IUserRepository {\n  constructor(private httpClient: IHttpClient) {}\n\n  public readonly getWhoAmI = async () => {\n    return this.httpClient.get<User>('/user/whoami');\n  };\n}\n","import axios, { AxiosInstance } from 'axios';\nimport type {\n  DeleteRequestConfig,\n  GetRequestConfig,\n  IHttpClient,\n  PatchRequestConfig,\n  PostRequestConfig,\n  PutRequestConfig,\n} from './IHttpClient';\n\n/**\n * `HttpClientInitParams` is an object with an optional property `axiosInstance` of type\n * `AxiosInstance`.\n * @property {AxiosInstance} axiosInstance - An instance of Axios that will be used to make the HTTP\n * requests.\n */\nexport type HttpClientInitParams = {\n  axiosInstance?: AxiosInstance;\n};\n\n/* It's a wrapper around the axios library that adds the Digital Humani API key to the header of every\nrequest */\nexport class DuHttpClient implements IHttpClient {\n  private readonly axiosInstance: AxiosInstance;\n\n  /**\n   * It creates a new instance of the HttpClient class.\n   * @param {HttpClientInitParams}  - `axiosInstance`: An instance of axios. If you don't provide one,\n   * the SDK will create one for you.\n   */\n  constructor(params?: HttpClientInitParams) {\n    const env = process.env['DIGITALHUMANI_ENV'];\n    const apiKey = process.env['DIGITALHUMANI_API_KEY'];\n\n    if (env !== 'prod' && env !== 'sandbox') {\n      throw new Error(\n        \"Impossible to initialize digital humani sdk because envirnoment has not been provided or the provided value is different from 'sandbox' and 'prod'.\",\n      );\n    }\n\n    if (!apiKey) {\n      throw new Error(\n        'Impossible to initialize digital humani sdk because the API key has not been found.',\n      );\n    }\n\n    let baseUrl;\n\n    if (env === 'sandbox') {\n      baseUrl = 'https://api.sandbox.digitalhumani.com';\n    } else {\n      baseUrl = 'https://api.digitalhumani.com';\n    }\n\n    this.axiosInstance = params?.axiosInstance ?? axios.create({});\n    this.axiosInstance.defaults.baseURL = baseUrl;\n    this.axiosInstance.defaults.timeout = 30000;\n    this.axiosInstance.defaults.headers.common = {\n      'Content-Type': 'application/json',\n      'X-Api-Key': apiKey,\n    };\n  }\n\n  public get = async <T>(\n    url: string,\n    configs: GetRequestConfig = {},\n  ): Promise<T> => {\n    const { ...options } = configs;\n    const res = await this.axiosInstance.get<T>(url, {\n      ...options,\n      headers: { ...configs?.headers },\n    });\n    return res.data;\n  };\n\n  public post = async <T, P>(\n    url: string,\n    configs: PostRequestConfig<P> = {},\n  ): Promise<T> => {\n    const res = await this.axiosInstance.post<T>(url, configs?.body, {\n      headers: { ...configs?.headers },\n    });\n\n    return res.data;\n  };\n\n  public put = async <T, P>(\n    url: string,\n    configs: PutRequestConfig<P> = {},\n  ): Promise<T> => {\n    const res = await this.axiosInstance.put<T>(url, configs?.body, {\n      headers: { ...configs?.headers },\n    });\n\n    return res.data;\n  };\n\n  public patch = async <T, P>(\n    url: string,\n    configs: PatchRequestConfig<P> = {},\n  ): Promise<T> => {\n    const res = await this.axiosInstance.patch<T>(url, configs?.body, {\n      headers: { ...configs?.headers },\n    });\n\n    return res.data;\n  };\n\n  public delete = async <T>(\n    url: string,\n    configs: DeleteRequestConfig = {},\n  ): Promise<T> => {\n    const { ...options } = configs;\n    const res = await this.axiosInstance.delete<T>(url, {\n      ...options,\n      headers: { ...configs?.headers },\n    });\n\n    return res.data;\n  };\n}\n","import type { IEnterpriseRepository } from './repositories/EnterpriseRepository/enterprise.interface';\nimport { EnterpriseRepository } from './repositories/EnterpriseRepository/enterprise.repository';\nimport type { IProjectRepository } from './repositories/ProjectRepository/project.interface';\nimport { ProjectRepository } from './repositories/ProjectRepository/project.repositories';\nimport type { ITreeRepository } from './repositories/TreeRepository/tree.interface';\nimport { TreeRepository } from './repositories/TreeRepository/tree.repository';\nimport type { IUserRepository } from './repositories/UserRepository/user.interface';\nimport { UserRepository } from './repositories/UserRepository/user.repository';\nimport { DuHttpClient } from './services/HttpClient/HttpClient';\nimport type { IHttpClient } from './services/HttpClient/IHttpClient';\n\n/* It's a singleton that provides access to the repositories */\nclass DigitalHumani {\n  private static _instance: DigitalHumani;\n\n  public static get instance(): DigitalHumani {\n    if (!this._instance) this._instance = new DigitalHumani();\n    return this._instance;\n  }\n\n  public static get i(): DigitalHumani {\n    return this.instance;\n  }\n\n  public readonly userRepo: IUserRepository;\n  public readonly treeRepo: ITreeRepository;\n  public readonly enterpriseRepo: IEnterpriseRepository;\n  public readonly projectRepo: IProjectRepository;\n\n  private constructor() {\n    const httpClient: IHttpClient = new DuHttpClient();\n\n    this.userRepo = new UserRepository(httpClient);\n    this.treeRepo = new TreeRepository(httpClient);\n    this.projectRepo = new ProjectRepository(httpClient);\n    this.enterpriseRepo = new EnterpriseRepository(httpClient);\n  }\n}\n\nexport default DigitalHumani;\n"],"names":["EnterpriseRepository","httpClient","_this","this","getEnterprise","enterpriseId","get","concat","getTreeCount","_a","endDate","month","startDate","getTreeCountByMonth","getTreeCountByDateRange","Error","params","ProjectRepository","getProjects","__awaiter","getProjectDetails","projectId","TreeRepository","getTrees","user","getTree","treeId","plantTrees","body","post","UserRepository","getWhoAmI","DuHttpClient","url","configs","options","__rest","axiosInstance","headers","__assign","sent","data","put","patch","delete","baseUrl","env","process","apiKey","axios","create","defaults","baseURL","timeout","common","DigitalHumani","userRepo","treeRepo","projectRepo","enterpriseRepo","Object","defineProperty","_instance","instance"],"mappings":"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"}